<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc0791 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0791.xml">
<!ENTITY rfc1122 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY rfc1393 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1393.xml">
<!ENTITY rfc2119 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc2460 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY rfc2474 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2474.xml">
<!ENTITY rfc2702 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2702.xml">
<!ENTITY rfc3031 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3031.xml">
<!ENTITY rfc3032 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3032.xml">
<!ENTITY rfc3168 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3168.xml">
<!ENTITY rfc3209 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3209.xml">
<!ENTITY rfc3270 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3270.xml">
<!ENTITY rfc3550 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3550.xml">
<!ENTITY rfc3985 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3985.xml">
<!ENTITY rfc4023 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4023.xml">
<!ENTITY rfc4446 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4446.xml">
<!ENTITY rfc4447 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4447.xml">
<!ENTITY rfc4448 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4448.xml">
<!ENTITY rfc4817 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4817.xml">
<!ENTITY rfc5086 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5086.xml">
<!ENTITY rfc5087 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5087.xml">
<!ENTITY rfc5129 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5129.xml">
<!ENTITY rfc5462 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5462.xml">
<!ENTITY rfc6073 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6073.xml">
<!ENTITY rfc6437 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6437.xml">
<!ENTITY rfc6658 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6658.xml">
<!ENTITY rfc6718 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6718.xml">
<!ENTITY rfc7167 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7167.xml">
<!ENTITY rfc6733 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6733.xml">
<!ENTITY rfc6864 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6864.xml">
<!ENTITY rfc6621 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6621.xml">
<!ENTITY rfc6814 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6814.xml">
<!ENTITY rfc6540 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6540.xml">
<!ENTITY rfc5921 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5921.xml">
<!ENTITY rfc6275 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6275.xml">
<!ENTITY rfc2784 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2784.xml">
<!ENTITY rfc2890 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2890.xml">
<!ENTITY rfc7637 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7637.xml">
<!ENTITY rfc1700 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1700.xml">
<!ENTITY rfc7426 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7426.xml">
<!ENTITY rfc7510 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7510.xml">


<!ENTITY I-D.finn-detnet-problem-statement PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-finn-detnet-problem-statement-04.xml">
<!ENTITY I-D.finn-detnet-architecture PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-finn-detnet-architecture-02.xml">
<!ENTITY I-D.ietf-isis-pcr SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-isis-pcr.xml">
<!ENTITY I-D.ietf-6man-segment-routing-header SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6man-segment-routing-header.xml">
<!ENTITY I-D.ietf-spring-segment-routing SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-spring-segment-routing.xml">
<!ENTITY I-D.ietf-v6ops-ipv6-ehs-in-real-world SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-v6ops-ipv6-ehs-in-real-world.xml">
<!ENTITY I-D.ietf-sunset4-gapanalysis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-sunset4-gapanalysis.xml">
<!ENTITY I-D.eckert-bier-te-arch SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.eckert-bier-te-arch.xml">
<!ENTITY I-D.ietf-intarea-gre-ipv6 SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-intarea-gre-ipv6.xml">

]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="yes"?>
<rfc category="info"
     docName="draft-dt-detnet-dp-alt-00"
	 ipr="trust200902"
	 submissionType="IETF">
  <front>
    <title abbrev="DetNet data plane alternatives">
     DetNet Data Plane Protocol and Solution Alternatives</title>

  <author role="editor" fullname="Jouni Korhonen" initials="J." surname="Korhonen">
   <organization abbrev="Broadcom">Broadcom</organization>
   <address>
    <postal>
     <street>3151 Zanker Road</street>
     <city>San Jose</city>
     <code>95134</code>
     <region>CA</region>
     <country>USA</country>
    </postal>
    <email>jouni.nospam@gmail.com</email>
   </address>
  </author>

  <author fullname="J&aacute;nos Farkas" initials="J." surname="Farkas">
   <organization abbrev="Ericsson">Ericsson</organization>
   <address>
    <postal>
     <street>Konyves K&aacute;lm&aacute;n krt. 11/B</street>
     <city>Budapest</city>
     <country>Hungary</country>
     <code>1097</code>
    </postal>
    <email>janos.farkas@ericsson.com</email>
   </address>
  </author>
  
  <!-- author fullname="Norman Finn" initials="N." surname="Finn">
   <organization abbrev="Cisco">Cisco</organization>
   <address>
    <email>nfinn@cisco.com</email>
   </address>
  </author -->
  
  <!-- author fullname="Olivier Marce" initials="O." surname="Marce">
   <organization abbrev="Nokia Bell Labs">Nokia Bell Labs</organization>
   <address>
    <email>Olivier.Marce@nokia.com</email>
   </address>
  </author -->
  
  <author fullname="Gregory Mirsky" initials="G." surname="Mirsky">
   <organization abbrev="Ericsson">Ericsson</organization>
   <address>
    <email>gregory.mirsky@ericsson.com</email>
   </address>
  </author>
  
  <author fullname="Pascal Thubert" initials="P." surname="Thubert">
   <organization abbrev="Cisco">Cisco</organization>
   <address>
    <email>pthubert@cisco.com</email>
   </address>
  </author>
  
  <author fullname="Zhuangyan Zhuang" initials="Z." surname="Zhuan">
   <organization abbrev="Huawei">Huawei</organization>
   <address>
    <email>zhuangyan.zhuang@huawei.com</email>
   </address>
  </author>
  
  <date />
  <workgroup>DetNet</workgroup>

  <abstract>
  <t>
   This document identifies existing IP and MPLS, and layer-2 encapsulations
   that run over IP and/or MPLS data plane technologies that could be considered
   as the base line solution alternatives for deterministic networking data
   plane definition.
  </t>
  </abstract>

  
  </front>

 <middle>
 <section title="Introduction">
  <t>
    Deterministic Networking (DetNet) <xref
    target="I-D.finn-detnet-problem-statement"/> provides a capability to carry
    unicast or multicast data streams for real-time applications with extremely
    low data loss rates and known upper bound maximum latency <xref
    target="I-D.finn-detnet-architecture"/>. The deterministic networking
    Quality of Service (QoS) is expressed as 1) the maximum end-to-end latency
    from sender (talker) to receiver (listener), 2) probability of loss of a
    packet.  Only the worst-case values for the mentioned parameters are
    concerned.
  </t>
  <t>
    There are three techniques to achieve the QoS required by deterministic
    networks:
     <list style="symbols">
      <t>zero congestion loss,</t>
      <t>explicit routes,</t>
      <t>packet replications and deletion.</t>
     </list>
   This document identifies existing IP and Multiprotocol Label Switching
   Architecture (MPLS) <xref target="RFC3031"/>, and layer-2 encapsulations that
   run over IP and/or MPLS data plane technologies that could be considered as
   the base line solution alternatives for deterministic networking data plane
   definition. The full scope of the deterministic networking data plane
   solution is considered including, as appropriate, quality of service (QoS),
   operations and management (O&amp;M), and time synchronization.
  </t>
 </section>

 <!--section title="Terminology">
  <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref
   target="RFC2119"></xref>.</t>
 </section-->


<section title="Criteria for data plane solution alternatives" anchor="sec_crit">
  <t>
   Each deterministic networking data plane solution alternative is described
   and evaluated using the criteria described in this section. The used criteria
   enumerated in this section are selected so that they highlight the existence
   or lack of features that are expected or seen important to a solution
   alternative for the data plane solution. 
  </t>
 

  <section title="#1 Encapsulation and overhead" anchor="sec_crit_encap">
    <t>
     In several cases a deterministic flow/strem has to be encapsulated inside
     other protocols, for example, when transporting a layer-2 Ethernet
     frame over an IP transport network. In some cases a former tunneling like
     encapsulation can be avoided by underlying transport protocol translation,
     for example, translating layer-2 Ethernet frame including addressing and
     stream identification into native IP traffic. Last it is possible that
     talkers and listeners handle deterministic flows natively in layer-3.
     This criteria concerns what is the encapsulation method the solution
     alternative support: tunneling like encapsulation, protocol translation or
     native layer-3 transport. In addition to the encapsulation mechanism this
     criteria is also concerned of the processing and specifically the 
     encapsulate header overhead.
    </t>
  </section>

  <section title="#2 Stream identification" anchor="sec_crit_streamid">
    <t>
     The solution alternative has to provide means to identify specific
     deterministic flows / streams. The stream identification can, for example,
     be explicit field in the data plane encapsulation header or implicitly
     encoded into the addressing scheme of the used data plane protocol. This
     criteria concerns the availability and details of deterministic flow /
     stream  identification the data plane protocol alternative has.
    </t>
  </section>

  <section title="#3 Packet sequencing" anchor="sec_crit_seq">
    <t>
     The solution alternative has to provide means for end systems to number
     packets sequentially and transport that sequencing information along with
     the sent packets. In addition to possible reordering packets one of the
     important uses for sequencing is detecting duplicates. In a case of
     intentional packet duplication a combination of stream identification and
     packet sequencing allows for detecting and discarding duplicates at the
     receiver (see <xref target="sec_crit_repdup"/> for more details).  This criteria
     concerns the availability and details of the packet sequencing
     capabilities the data plane protocol alternative has.
    </t>
  </section>
  
  
  <section title="#4 Explicit routes" anchor="sec_crit_explicit">
    <t>
     The solution alternative has to provide a mechanism(s) for establishing
     explicit routes that all packets belonging to a deterministic flow /
     stream will follow. The explicit route can be seen as a form of source
     routing or a pre-reserved path e.g., using some network management
     procedure. It should be noted that the explicit route does not need to be
     detailed to a level where every possible intermediate node along the path
     is part of the named explicit route. The IEEE 802.1Qca <xref
     target="IEEE8021Qca"/> specification defines how to do explicit path
     control in a bridged network and its IETF counter part is defined in 
     <xref target="I-D.ietf-isis-pcr"/>. This criteria concerns the
     available mechanisms for explicit routes for the data plane protocol
     alternative.
    </t>
  </section>

  <section title="#5 Packet replication and deletion" anchor="sec_crit_repdup">
    <t>
     End systems and/or relay systems can number packets sequentially,
     replicate them, and later eliminate all but one of the replicas, at
     multiple points in the network in order to ensure that one (or more)
     equipment failure events still leave at least one path intact for a
     deterministic networking stream. The goal is to enable seamless
     "protection switching" in a way that no packet gets lost or there is
     no ramp up time when either one of the paths fails for one reason or
     another.
    </t>
    <t>
     The IEEE 802.1CB <xref target="IEEE8021CB"/> is an example of
     Ethernet-based solution that defines packet sequence numbering, packet
     replication, and duplicate packet identification and deletion. The
     deterministic networking data plane solution alternative at layer-3 has to
     provide equivalent functionality. This criteria concerns the available
     mechanisms for packet replication and duplicate deletion the data plane
     protocol alternative has.
    </t>
  </section>

  <section title="#6 Operations and management" anchor="sec_crit_oam" >
    <t>
     The solution alternative should demonstrate an availability of appropriate
     standardized O&amp;M tools or control/management plane that can be
     extended for deterministic networking purposes with a reasonable effort,
     when required. The O&amp;M tools do not necessarily need to be specific to
     the data plane protocol as it could be the case, for example, with
     MPLS-based data planes.
    </t>
  </section>

  <section title="#7 Time synchronization" anchor="sec_crit_sync">
    <t>
     The solution alternative may benefit from having a sense of time or at
     least that the associated O&amp;M protocols had time synchronization
     properties. One concrete example is Realtime Transport Protocol (RTP)
     <xref target="RFC3550"/>, which carries timestamps in the protocol header
     in addition to sequence numbers, has a  well specified algorithms, for
     example, for jitter calculations, and also has an associated control
     channel, the Realtime Transport Control Protocol (RTCP). Another example
     could be residence time measurement support for MPLS network domain using
     Generic Associated Channel (G-ACh) extensions. This criteria concerns the
     available mechanisms for time synchronization in the context of the
     data plane protocol alternative.
    </t>
  </section>

  <section title="#8 Class and quality of service capabilities" anchor="sec_crit_qos">
    <t>
     The data plane solution alternative should provide means for class of
     service (CoS) based traffic classification, for example, for queuing
     discipline.  Existing CoS traffic classification enablers include but are
     not limited to IP header differentiated services code point (DSCP) field
     <xref target="RFC2474"/>, MPLS label traffic class field <xref
     target="RFC5462"/>, and IEEE 803.1p priority code point (PCP) field to name
     few.
    </t>
    <t>
     Quality of Service (QoS) is a mechanism for flow/stream specific traffic
     treatment and include a quarantee/agreement for the service.  In the
     context of the data plane solution alternative there should be means for
     flow/stream identification, which then can be used to map a flow/stream
     against specific resources and treatment in a node enforcing the QoS.
    </t>
    <t> 
     This Criteria concerns the availability and mechanisms for the CoS and QoS
     marking and signaling as a part of the data plane protocol solution alternative.
    </t>
  </section>
  <section title="#9 Packet traceability" anchor="sec_crit_trace">
    <t>
     For the network management and specifically for tracing down
     implementation or network configuration errors any means to find out
     whether a packet is a replica, which node performed replication, and
     which path was intended for the replica, can be very useful.
     This criteria concerns the availability of solutions for
     tracing packets in the context of data plane protocol alternative.
    </t>
  </section>
  <section title="#10 Technical maturity" anchor="sec_crit_matu">
    <t>
     The technical maturity of the data plane solution alternative is crucial,
     since it  basically defines the effort, time line and risks involved for
     the use of the solution in deployments. For example, the maturity level
     can be categorised as available immediately, available with small
     extensions, available with repurposing/redefining portions of the protocol
     or its header fields.  Yet another important measure for maturity is the
     deployment experience. This criteria concerns the maturity of the data
     plane protocol alternative as the solution alternative.
    </t>
  </section>
</section>


<section title="Data plane solution alternatives">
 <t>
  The following sections describe and rate deterministic data plane solution
  alternatives. In "Analysis and Discussion" section each alternative is
  evaluated against the criteria given in <xref target="sec_crit"/> and rated
  using the following: (M)eets the criteria, (W)ork needed, and (N)ot suitable
  or too much work envisioned.
 </t>

 <section title="Native IPv6 transport" anchor="sec_alt_ipv6">
  <section title="Solution description">
   <t>
    This section investigates the application of native IPv6 <xref
    target="RFC2460"/> as the data plane for deterministic networking along the
    criteria collected in <xref target="sec_crit"/>.
   </t>
   <t>
    The application of higher OSI layer headers, i.e., headers deeper in the
    packet, can be considered. Two aspects have to be taken into account for
    such solutions. (i) Those header fields can be encrypted. (ii) Those
    header fields are deeper in the packet, therefore, routers have to apply
    deep packet inspection. See further details in
    <xref target="sec_alt_ipv6_higher"/>.
   </t>
  </section>
  
  <section title="Analysis and Discussion" anchor="sec_alt_ipv6_ana">
   <t><list style="hanging">
    <t hangText="Encapsulation and overhead (W)">
     <vspace blankLines="1"/>
     Deterministic flows are assumed to be handled natively at layer-3 by IPv6
     at the first place. The fixed header of an IPv6 packet is 40 bytes <xref
     target="RFC2460"/>.  The overhead is bigger if any extension header is
     used. However, the exact overhead (<xref target="sec_crit_encap"/>)
     depends on what solution is actually used to provide DetNet features,
     e.g., explicit routing or seamless redundancy if any of these is applied.
     <vspace blankLines="1"/></t>
    
    <t hangText="Stream identification (M/W)">
     <vspace blankLines="1"/>
     The 20-bit flow label field of the fixed IPv6 header is suitable to
     distinguish different deterministic flows/streams. But guidance on the use
     of the flow label provided by <xref target="RFC6437"/> places restrictions
     on how the flow label can be used. In particular, labels should be chosen
     from an approximation to a discrete uniform distribution. Additionally,
     existing implementations generally do not open APIs to control the flow
     label from the upper layers.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet sequencing (W/N)">
     <vspace blankLines="1"/>
     TBD. [Editor's note: packet sequencing would require a new extension
     header - a destination option most likely - to add sequence numbers.]
    <vspace blankLines="1"/></t>
    
    <t hangText="Explicit routes (W)">
     <vspace blankLines="1"/>
     There is an initiative to equip IPv6 with explicit routing capabilities.
     The idea is to apply Segment Routing (SR) <xref
     target="I-D.ietf-spring-segment-routing"/> to IPv6 via the addition of a
     new type of routing extension header <xref
     target="I-D.ietf-6man-segment-routing-header"/>. Alternatively, a 
     management or a Software-Defined Networking (SDN) <xref target="RFC7426"/>
     based approach can be applied for establishing explicit routes. 
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet replication and deletion (W)">
     <vspace blankLines="1"/>
     The implementation of this functionality largely depends on used the packet
     sequencing and flow/stream identification approaches. Specifically in a
     case of packet replication the replicated packets are likely to be sourced
     from a different IPv6 address than the original packets, thus the
     flow/stream identification that is independent of the addressing becomes
     important. Actually, Mobile IPv6 <xref target="RFC6275"/> had a similar
     issue in case of route optimization. Sourcing packets with the home address
     that is not topologically correct in the visited network was solved using a
     specific Home Address option.
     <vspace blankLines="1"/>
     At present sequencing and flow/stream identification beyond IPv6
     flow label would require new IPv6 extension headers. Another concern
     regarding packet replication is how to enforce replicated packets to take
     different route while the final destination still remains the same. With
     IPv6 and using layer-3 mechanisms this cannot be done without form of
     source routing encoded into the packet, for example, in form of source
     routing extension  headers.  Also, there is currently no specification for
     the duplicate packet deletion functionality at merging points.
    <vspace blankLines="1"/></t>
    
    <t hangText="Operations and management (M/W)">
     <vspace blankLines="1"/>
     IPv6 enjoys the existing toolbox for generic IP network management.
     However, IPv6 specific management features are still not at the level of
     that IPv4 has. This specifically concerns the areas that are IPv6 specific,
     for example, related to neighbor discovery protocol (ND), stateless address
     autoconfiguration (SLAAC), subscriber identification, and security.
     While the standards are already mostly in place the implementations in
     deployed equipment can be lacking or inadequate for commercial
     deployments. This is largely only an issue with old existing equipment.
   <vspace blankLines="1"/></t>
    
    <t hangText="Time synchronization (W/N)">
     <vspace blankLines="1"/>
     IPv6 has no existing supporting mechanisms for anything time
     synchronization. A new extension header would be needed for this purpose,
     if such functionality is required.
    <vspace blankLines="1"/></t>
    
    <t hangText="Class and quality of service capabilities (M)">
     <vspace blankLines="1"/>
     The traffic class field of the fixed IPv6 header is designed for this purpose.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet traceability (M/W/N)">
     <vspace blankLines="1"/>
     The traceability of replicated packets also depends on the sequencing
     mechanism. As noted earlier, there is no header field whose application
     would be straightforward as a field for packet sequencing.  Furthermore,
     traceability would need a mechanism to trace back the reverse route the
     packet took in some cases. While IPv6 as such has no support for this, it
     appears source route extensions such as the one defined for segment routing
     could be used for tracing purposes.
     <vspace blankLines="1"/></t>
    
    <t hangText="Technical maturity (M/W)">
     <vspace blankLines="1"/>
     IPv6 has been around about 20 years. However, large scale global and
     commercial IPv6 deployments are rather new dating only few years back to
     around 2012. While IPv6 has proven itself there are number of small issues
     to work on as they show up once operations experience grows. A good meter
     is the number of basic IPv6 related documents in IETF V6OPS, V6MAN and
     other use case specific working groups.
    <vspace blankLines="1"/></t>
   </list></t>
  </section>

  <section title="Higher layer header fields" anchor="sec_alt_ipv6_higher">
   <t>
     Fields of headers belonging to higher OSI layers, e.g., transport  layer,
     can be used to implement functionality that is not provided by the IPv6
     header fields. However, this approach cannot be always applied, e.g., due
     to encryption. Furthermore, even if this approach is applicable, it
     requires deep packet inspection from the routers and switches. There are
     implementation dependent limits how far into the packet the lookup can be
     done efficiently in the fast path. In general a safe bet is between 128 and
     256 octets for the maximum lookup depth. Various higher layer protocols can
     be applied. Some examples are provided here for the sequence numbering
     feature (<xref target="sec_crit_seq"/>).
   </t>
   
   <section title="TCP">
   <t>
     The TCP header includes a sequence number parameter, which can be applied
     to detect and eliminate duplicate packets if seamless redundancy is used.
     As the TCP header is right after the IP header, it does not require very 
     deep packet inspection; the 4-byte sequence number is conveyed by bits 32
     through 63 of the TCP header.  In addition to sequencing, the TCP header
     also contain source and destination port information that can be used for
     assisting the flow/stream identification.
   </t>
   </section> 
   
   <section title="RTP">
   <t>
     RTP is often used to deliver time critical traffic in IP networks. RTP is
     is carried on top of IP and UDP <xref target="RFC3550"/>. The RTP header
     includes a 2-byte sequence number, which can be used to detect and
     eliminate duplicate packets if seamless redundancy is used. The sequence
     number is conveyed by bits 16 through 31 of the RTP header. In addition to
     the sequence number the RTP header has also timestamp field (bits 32
     through 63) that can be useful for time synchronization purposes.
     Furthermore, the RTP header has also one or more synchronization sources
     (bits starting from 64) that can potentially be useful for flow/stream
     identification purposes.
     also co
   </t>
   </section>
  </section> 

  <section title="Summary">
   <t>
    TBD.
   </t>
  </section>
 </section>

 <section title="Native IPv4 transport" anchor="sec_alt_ipv4">
  <section title="Solution description">
   <t>
    IPv4 <xref target="RFC0791"/> is in principle the same as IPv6, except that
    it has a smaller address space. However, IPv6 was designed around the fact
    that extension headers are an integral part of the protocol and operation
    from the beginning, although the practise may some times prove differently
    <xref target="I-D.ietf-v6ops-ipv6-ehs-in-real-world"/>. IPv4 never really
    needed any extension headers to work properly, thus support for IPv4 options
    outside closed networks cannot typically be guaranteed. In the context of
    deterministic networking data plane solutions the major difference between
    IPv4 and IPv6 seems to be the practical support for header extensibility.
    Anything below and above the IP header independent of the verion is
    practically the same. 
   </t>
  </section>

  <section title="Analysis and Discussion" anchor="sec_alt_ipv4_ana">
   <t><list style="hanging">
    <t hangText="Encapsulation and overhead (M)">
     <vspace blankLines="1"/> The fixed header of an IPv4 packet is 20 bytes
     <xref target="RFC0791"/>. IP options add overhead and the maximum IPv4
     header size if 60 octets leaving only 40 octets for possible options.
     <vspace blankLines="1"/></t>
    
    <t hangText="Stream identification (W/N)">
     <vspace blankLines="1"/>
     The IPv4 header has a 16-bit identification field that was originally
     intended for assisting fragmentation and reassembly of IPv4 packets as
     described in <xref target="RFC0791"/>. The identification field has also
     been proposed to be used for actually identifying flows/streams between two
     IP addresses and a given protocol for detecting and removing duplicate
     packets <xref target="RFC1122"/>. However, recent update <xref
     target="RFC6864"/> to both <xref target="RFC0791"/> and <xref
     target="RFC1122"/> restricts the use of IPv4 identification field only to
     fragmentation purposes. Duplicate packet detection for IPv4 is studied in
     <xref target="RFC6621"/> to a great detail in the context of simplified
     multicast forwarding. 
     <vspace blankLines="1"/>
     The IPv4 also has a stream identifier option <xref target="RFC0791"/>,
     which contains a 16-bit SATNET stream identifier. However, the option has
     been deprecated <xref target="RFC6814"/>.  The conclusion is that stream
     identification does not work nicely with IPv4 header alone and a
     traditional 5-tuple identification might not also be enough in a case of a
     flow/stream duplication. For a working solution upper layer protocol
     headers such as the RTP are required for unambiguous flow/stream
     identification.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet sequencing (W/N)">
     <vspace blankLines="1"/>
     IPv4 has no inbuilt support for packet sequencing. Upper layer protocol
     header support such as the RTP is required.
    <vspace blankLines="1"/></t>
    
    <t hangText="Explicit routes (M/W)">
     <vspace blankLines="1"/>
     IPv4 has two source routing option specified: the loose source and record
     route option (LSRR), and the strict source and record route option (SSRR)
     <xref target="RFC0791"/>. The support of these options in the Internet is
     questionable but within a closed network the support may be assumed.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet replication and deletion (W/N)">
     <vspace blankLines="1"/>
     Currently there is no native mechamism for IPv4 to support packet
     replication and deletion. In general the issue regarding the IPv6
     packet replication and deletion also applies to IPv4.
    <vspace blankLines="1"/></t>
    
    <t hangText="Operations and management (M)">
     <vspace blankLines="1"/>
     IPv4 enjoys the extensive and "complete" existing toolbox for generic IP
     network management.
   <vspace blankLines="1"/></t>
    
    <t hangText="Time synchronization (W/N)">
     <vspace blankLines="1"/>
     IPv4 has an existing option for transporting "Internet Timestamp" <xref
     target="RFC0791"/> with the accuracy of 1ms. The support and usability of
     this option is unknown in the context of determnistic networking data
     plane. Similarly to IPv6 new work would be needed to introduce sense of
     time to IPv4 or rely on upper layer protocol such as the RTP to provide the
     required functionality.
    <vspace blankLines="1"/></t>
    
    <t hangText="Class and quality of service capabilities (M)">
     <vspace blankLines="1"/>
     The type of service (TOS) field of the fixed IPv4 header is designed for this purpose.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet traceability (W/N)">
     <vspace blankLines="1"/>
     The IPv4 has a traceroute option <xref target="RFC1393"/> that could be used
     to record the route the packet took. However, the option has been
     deprecated <xref target="RFC6814"/>. Similarly to IPv6 new work would be
     needed to allow better traceability of IPv4 packets.
     <vspace blankLines="1"/></t>
    
    <t hangText="Technical maturity (M/W)">
     <vspace blankLines="1"/>
     IPv4 can be considered mature technology with over 30 years of
     implementation, deployment and operations experience. However, no new IPv4
     standards development is "allowed" anymore <xref target="RFC6540"/><xref
     target="I-D.ietf-sunset4-gapanalysis"/>.
    <vspace blankLines="1"/></t>
   </list></t>
  </section>

  <section title="Higher layer header fields" anchor="sec_alt_ipv4_higher">
   <t>
     Fields of headers belonging to higher OSI layers, e.g., transport  layer,
     can be used to implement functionality that is not provided by the IPv4
     header fields. See the discussion in <xref target="sec_alt_ipv6_higher"/>,
     which is directly applicable for IPv4 as well.
   </t>
  </section> 

  <section title="Summary">
  </section>
 </section>
 
 <!--section title="Layer-2 tunneling over IP"-->
  <section title="Generic Routing Encapsulation (GRE)" anchor="sec_alt_gre">
   <section title="Solution description">
    <t>
     Generic Routing Encapsulation (GRE) <xref target="RFC2784"/> provides an
     encapsulation of an arbitrary network layer protocol over another arbitrary
     network layer protocol. The encapsulation of a GRE packet can be found in
     <xref target="fig_gre_encap"/>. 
    </t>
    <figure anchor="fig_gre_encap" title="Encapsulation of a GRE packet">
    <artwork align="center"><![CDATA[
+-------------------------------+
|                               |
|        Delivery Header        |
|                               |
+-------------------------------+
|                               |
|          GRE Header           |
|                               |
+-------------------------------+
|                               |
|         Payload packet        |
|                               |
+-------------------------------+
    ]]></artwork></figure>

    <t>
     Based on RFC2784, <xref target="RFC2890"/> further includes sequencing
     number and Key in optional fields of the GRE header, which may help to
     transport Detnet traffic flows over IP networks. The format of a GRE header
     is presented in <xref target="fig_gre_hdr"/>.
    </t>
    <figure title="Format of a GRE header" anchor="fig_gre_hdr">
    <artwork align="center"><![CDATA[
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |C| |K|S|  Reserved0      | Ver |          Protocol Type          |
 +-----------------------------------------------------------------+
 |      Checksum (optional)      |        Reserved1 (Optional)     |
 +-----------------------------------------------------------------+
 |                        Key (optional)                           |
 +-----------------------------------------------------------------+
 |                  Sequence Number (optional)                     |
 +-----------------------------------------------------------------+
 ]]></artwork></figure>
   </section>
   <section title="Analysis and Discussion">
    <t><list style="hanging">
    <t hangText="Encapsulation and overhead (M)">
     <vspace blankLines="1"/>
     GRE provides encapsulation for a network layer protocol over anther network
     layer protocol. A new protocol type for Detnet traffics should be allocated
     as an "Ether Type" in <xref target="RFC1700"/> and in <xref
     target="ETYPES"/>. The fixed header of a GRE packet is 4 octets while the
     maximum header is 16 octets with optional fields in <xref
     target="fig_gre_hdr"/>.
     <vspace blankLines="1"/></t>
    
    <t hangText="Stream identification (W)">
     <vspace blankLines="1"/>
     There is no stream identification field in GRE header. However, it can rely
     on the flow identification mechanism applied in the delivery protocols,
     such as stream identification stated in IP section 3.2.1 and 3.2.2 when the
     delivery protocol are IPv6 and IPv4 respectively.  Alternatively, the Key
     field can also be extended to carry the stream identification. The size of
     Key field is 4 octets.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet sequencing (M)">
     <vspace blankLines="1"/>
     As stated in section 3.x.1, GRE provides an optional sequencing number in
     its header to provide sequencing services for packets. The size of the
     sequencing number is 32 bits.
    <vspace blankLines="1"/></t>
    
    <t hangText="Explicit routes (W/N)">
     <vspace blankLines="1"/>
     GRE has no packet replication and deletion currently in its header and
        should be extended or rely on delivery protocols.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet replication and deletion (N)">
     <vspace blankLines="1"/>
     GRE has no packet replication and deletion currently in its header and
     should be extended or rely on delivery protocols.
    <vspace blankLines="1"/></t>
    
    <t hangText="Operations and management (W/N)">
     <vspace blankLines="1"/>
     [note: rely on the delivery protocol] GRE has no packet replication and
     deletion currently and should be relied on delivery protocols.
     <vspace blankLines="1"/></t>
    
    <t hangText="Time synchronization (W/N)">
     <vspace blankLines="1"/>
     [note: rely on the delivery protocol] GRE has no packet replication and
     deletion currently and should be relied on delivery protocols.
    <vspace blankLines="1"/></t>
    
    <t hangText="Class and quality of service capabilities (W/N)">
     <vspace blankLines="1"/>
     [note: rely on the delivery protocol] GRE has no packet replication and
     deletion currently and should be relied on delivery protocols. For the
     class of service capability, an optional code point field to indicate CoS
     of a traffic can be extended in GRE header.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet traceability (W/N)">
     <vspace blankLines="1"/>
     [note: rely on the delivery protocol] GRE has no packet replication and
     deletion currently and should be relied on delivery protocols.
     <vspace blankLines="1"/></t>
    
    <t hangText="Technical maturity (M)">
     <vspace blankLines="1"/>
     GRE has been developed over 20 years. The delivery protocol mostly used is
     IPv4, while the IPv6 support for GRE is to be standardized now in IETF as
     <xref target="I-D.ietf-intarea-gre-ipv6"/>. Due to its good extensibility,
     GRE is also extended to support network virtualization in Data Center,
     which is NVGRE <xref target="RFC7637"/>.
     <vspace blankLines="1"/></t>
    </list></t>
   </section>

   <section title="Summary">
   </section>
  </section>
    
  <section title="L2TP" anchor="sec_alt_l2tp">
   <section title="Solution description">
   </section>

   <section title="Analysis and Discussion">
   </section>

   <section title="Summary">
   </section>
  </section>

 <!--/section-->
  
  
 <section title="PseudoWires" anchor="sec_alt_pwe">
  <section title="Solution description">
   <t>
    PSeudo Wire Emulation Edge-to-Edge (PWE3) <xref target="RFC3985"/> or
    simply PseudoWires (PW) provide means of emulating the essential attributes
    and behaviour of a telecommunications service over a packet switched
    network (PSN) using IP or MPLS transport.  In addition to traditional
    telecommunications services such as T1 line or Frame Relay, PWs also
    provide transport for Ethernet service <xref target="RFC4448"/> and for
    generic packet service <xref target="RFC6658"/>.  <xref target="fig_pwe3_stack"/>
    illustrate the reference PWE3 stack model.
   </t>
   <figure title="PWE3 protocol stack reference model" anchor="fig_pwe3_stack">
   <artwork align="center"><![CDATA[
+----------------+                      +----------------+
|Emulated Service|                      |Emulated Service|
|(e.g., Eth, ...)|<= Emulated Service =>|(e.g., Eth, ...)|
+----------------+                      +----------------+
|    Payload     |                      |    Payload     | CW,
|  Encapsulation |<=== Pseudo Wire ====>|  Encapsulation | Timing,
|                |                      |                | Seq., ..
+----------------+                      +----------------+
|PW Demultiplexer|                      |PW Demultiplexer|
|   PSN Tunnel,  |<==== PSN Tunnel ====>|  PSN Tunnel,   | MPLS.
| PSN & Physical |                      | PSN & Physical | L2TP,
|     Layers     |                      |    Layers      | IP, ..
+-------+--------+     ___________      +---------+------+
        |             /           \               |
        +============/     PSN     \==============+
                     \             /
                      \___________/
   ]]>
   </artwork></figure>
   <t>
    PWs appear as a good data plane solution alternative for a number of
    reasons. PWs are a proven and deployed technology with a rich O&amp;M
    control plane <xref target="RFC4447"/>, and enjoy the toolbox developed for
    MPLS networks. Furthermore, PWs may have an optional Control Word (CW) as
    part of the payload encapsulation between the PSN and the emulated service
    that is, for example, capable of frame sequencing and duplicate detection.
    The encapsulation layer may also provide timing  <xref target="RFC5087"/>.
   </t>
   <t>
    PWs can be also used if the PSN is IP, which enables the application of PWs
    in networks that do not have MPLS enabled in their core routers. One
    approach to provide PWs over IP is to provide MPLS over IP in some way and 
    then leverage what is available for PWs over MPLS. The following standard
    solutions are available both for IPv4 and IPv6 to follow this approach. The
    different solutions have different overhead as discussed in the following 
    subsection. The MPLS-in-IP encapsulation is specified by
    <xref target="RFC4023"/>. The IPv4 Protocol Number field or the IPv6 Next 
    Header field is set to 137, which indicates an MPLS unicast packet. (The use
    of the MPLS-in-IP encapsulation for MPLS multicast packets is not supported.)
    The MPLS-in-GRE encapsulation is specified in <xref target="RFC4023"/>, 
    where the IP header (either IPv4 or IPv6) is followed by a GRE header, which
    is followed by an MPLS label stack. The protocol type field in the GRE
    header is set to MPLS Unicast (0x8847) or Multicast (0x8848). MPLS over
    L2TPv3 over IP encapsulation is specified by <xref target="RFC4817"/>. The
    MPLS-in-UDP encapsulation is specified by <xref target="RFC7510"/>, where 
    the UDP Destination Port indicates tunneled MPLS packet and the UDP Source 
    Port is an entropy value that is generated by the encapsulator to uniquely
    identify a flow. MPLS-in-UDP encapsulation can be applied to enable
    UDP-based ECMP (Equal-Cost Multipath) or Link Aggregation. All these
    solutions can be secured with IPSec.
   </t>
  </section>

  <section title="Analysis and Discussion">
   <t><list style="hanging">
    <t hangText="Encapsulation and overhead (M)">
     <vspace blankLines="1"/>
     PWs offer encapsulation services practically for any types of payloads
     over any PSN.  New PW types need a code point allocation <xref
     target="RFC4446"/> and in some cases an emulated service specific
     document.
     <vspace blankLines="1"/>
     Specifically in the case of the MPLS PSN the PW encapsulation overhead is
     minimal. Typically minimum two labels and a CW is needed, which totals to
     12 octets. PW type specific handling might, however, allow optimizations
     on the emulated service in the provider edge (PE) device's native service
     processing (NSP) / forwarder function. These optimizations could be used,
     for example, to reduce header overhead. Ethernet PWs already have rather
     low overhead <xref target="RFC4448"/>. Without a CW and VLAN tags the
     Ethernet header gets reduced to 14 octets (minimum Ethernet header
     overhead is 26). IP PSN, on the other hand, would have at least 20
     (IPv4) or 40 (IPv6) octets of overhead excluding the PW payload
     encapsulation.
     <vspace blankLines="1"/>
     The overhead is somewhat bigger in case of IP PSN if an MPLS over IP 
     solution is applied to provide PWs. IP adds an overhead to the PW over MPLS
     overhead; furthermore, the GRE, L2TPv3, or UDP header has to be taken into
     account if any of these further encapsulations is used.
    <vspace blankLines="1"/></t>
    
    <t hangText="Stream identification (M)">
     <vspace blankLines="1"/>
     PWs provide multiple layers of stream identification, especially in the case
     of the MPLS PSN. The PWs are typically prepended with a PW label that can be
     used to identify a specific PW. Furthermore, the PSN also uses one or more
     labels to transport packets over a specific label switched paths (that then
     would carry PWs). IP (and other) PSNs would need other mechanisms, such as, 
     UDP port numbers, upper layer protocol header (like TRP) or some IP extension
     header to provide required stream identification.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet sequencing (M)">
     <vspace blankLines="1"/>
     As mentioned earlier PWs may contain an optional CW that is able to provide
     sequencing services. The size of the sequence number in the generic CW is
     16 bits, which might be, depending on the used link speed be too little.
    <vspace blankLines="1"/></t>
    
    <t hangText="Explicit routes (M)">
     <vspace blankLines="1"/>
     In a case of the MPLS PSN the traffic engineering toolbox developed for
     MPLS can be used to signal explicit label switched paths (LSP) <xref
     target="RFC5921"/> <xref target="RFC2702"/><xref target="RFC3209"/>.
     Furthermore, the PSN may also use segment routing (SR) to provide explicit
     routes <xref target="I-D.ietf-spring-segment-routing"/>. Segmement routing
     based solution would also be available for IPv6 PSN <xref
     target="I-D.ietf-6man-segment-routing-header"/>.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet replication and deletion (W)">
     <vspace blankLines="1"/>
     The 1+1 PW/LSP protection / redundancy mechanisms  <xref
     target="RFC6718"/> could provide tools for packet replication. However,
     these solutions are not really intended for sourcing multiple simultaneous
     packet streams. The solutions have one active and other standby stream.
     The PW duplicate detection mechanism also exists in theory <xref
     target="RFC3985"/> but no emulated service makes use of it currently.  For
     IP PSN refer to the discussion in  <xref target="sec_alt_ipv6_ana"/> and
     <xref target="sec_alt_ipv4_ana"/>. 
    <vspace blankLines="1"/></t>
    
    <t hangText="Operations and management (M/W)">
     <vspace blankLines="1"/>
     PWs have rich control plane for O&amp; and in a case of the MPLS PSN enjoy
     the full control plane toolbox developed for MPLS network O&amp;M likewise
     IP PSN have the full toolbox of IP network  O&amp;M tools. There could be,
     however, need for deterministic networking specific extensions for the
     mentioned control planes.
    <vspace blankLines="1"/></t>
    
    <t hangText="Time synchronization (M)">
     <vspace blankLines="1"/>
     It is possible to carry time synchronization information as part of the PW
     encapsulation layer (see for example <xref target="RFC5087"/>). Whether
     the timing precision is enough for all deterministic networking use cases
     vary, and it is possible existing mechanisms are not adequate for all use
     cases. IP PSNs have already demonstarted the use of time synchronization 
     as a part of PWE3  <xref target="RFC5086"/>.
    <vspace blankLines="1"/></t>
    
    <t hangText="Class and quality of service capabilities (M)">
     <vspace blankLines="1"/>
     In a case of IP PSN the 6-bit differentiated services code point (DSCP)
     field can be used for indicating the class of service <xref
     target="RFC2474"/> and 2-bit field reserved for the explicit congestion
     notification (ECN) <xref target="RFC3168"/>. Similarly, in a case of MPLS
     PSN, there are 3-bit traffic class field (TC) <xref target="RFC5462"/> in
     the label reserved for for both  Explicitly TC-encoded-PSC LSPs (E-LSP)
     <xref target="RFC3270"/> and ECN <xref target="RFC5129"/>.  Due to the
     limited number of bits in the TC field, their use for QoS and ECN
     functions restricted and intended to be flexible. Although the Qos/CoS
     mechanism is already in place some clarifications may be required in the
     context of deterministic networking flows/streams, for example, if some
     specific mapping between bit fields have to be done.
    <vspace blankLines="1"/></t>
    
    <t hangText="Packet traceability (M/W)">
     <vspace blankLines="1"/>
     In a case of MPLS PSN and an approach where PWs are prepended with a PSN
     layer outer label (or more labels in a stack) help tracing the explicit
     reverse path of the packet using the outer label(s) as the key. Even if the
     PW labels of the duplicated packets were the same the outer labels should
     be different. However, even this approach is not "perfect" since the
     intermediate node identities are not recorded into the packet hop-by-hop
     basis as some protocol do (for example, Diameter protocol loop detection
     <xref target="RFC6733"/>).
    <vspace blankLines="1"/></t>
    
    <t hangText="Technical maturity (M)">
     <vspace blankLines="1"/>
     PWs, IP and MPLS are proven technologies with wide variety of deployments
     and years of operational experience. Furthermore, the estimated work for
     missing functionality (packet replication and deletion) does not appear to
     be extensive, since the existing protection mechanism already get close to
     what is needed from the deterministic networking data plane solution.
    <vspace blankLines="1"/></t>
   </list></t>
  </section>

  <section title="Summary">
   <t>
    PseudoWires appear to be a strong candidate as the deterministic networking
    data plane solution alternative. The strong points are the technical
    maturity and the extensive control plane for O&amp;M. This holds
    specifically for MPLS-based PSN.
   </t>
   <t>
    Extensions are required to realize the packet replication and duplicate
    detection.  feature of the deterministic networking data plane.
   </t>
  </section>
 </section>

 <section title="MPLS" anchor="sec_alt_mpls">
  <section title="Solution description">
   <t>
    This section concentrates on MPLS <xref target="RFC3031"/><xref
    target="RFC3032"/> i.e., to a data plane solutions where a payload traffic
    is transported directly over MPLS. Basically, MPLS is capable of
    transporting any traffic payload, not just IP. However, in non-IP transport
    payload cases the solution quickly starts to resemble PseudoWires (see <xref
    target="sec_alt_pwe"/>) or other MPLS-based solutions with appropriate
    shim/adaptation layer between the MPLS label and the transported payload
    (see Sections <xref format="counter" target="sec_alt_bier"/> and <xref
    format="counter" target="sec_alt_bier_te"/>).
   </t>
  </section>

  <section title="Analysis and Discussion">
  </section>

  <section title="Summary">
  </section>
 </section>


 <section title="Bit Indexed Explicit Replication" anchor="sec_alt_bier">
  <t>
   Bit-Indexed Explicit Replication (BIER) layer may be considered to be
   included into Deterministic Networking data plane solution. Encapsulation of
   a BIER packet in MPLS network presented in <xref target="fig_BIER_MPLS"/>
  </t>
  
<figure anchor="fig_BIER_MPLS" align="center"
title="BIER packet in MPLS encapsulation">
<artwork align="center"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   Label Stack Element                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   Label Stack Element                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|              BIER-MPLS label          |     |1|               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 1 0 1|  Ver  |  Len  |              Entropy                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                BitString  (first 32 bits)                     ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~                                                               ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~                BitString  (last 32 bits)                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|OAM|     Reserved      | Proto |            BFIR-id            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
</figure>

  <section title="Solution description">
  <t>  
   The DetNet may be presented in BIER as distinctive payload type with its own 
   Proto(col) ID. Then it is likely that DetNet will have the header that would 
   identify:
   <list style="symbols">
    <t>Version;</t>
    <t>Sequence Number;</t>
    <t>Timestamp;</t>
    <t>Payload type, e.g. data vs. OAM.</t>
   </list>
   DetNet node, collocated with BFIR, may use multiple BIER sub-domains to
   create replicated flows. Downstream DetNet nodes, collocated with BFER, would
   terminate redundant flows based on Sequence Number and/or Timestamp
   information. Such DetNet may be BFER in one BIER sub-domain and BFIR in
   another. Thus DetNet flow would traverse several BIER sub-domains.
  </t>
   
<figure anchor="fig_BIER_DetNet" align="center"
title="DetNet in BIER domain">
<artwork align="center"><![CDATA[
                   +-----+
                   |  A  |
                   +-----+
                    /   \
                   .     .
                  /       .
                 .         \
                /           .
               .             .
              /               \
         +-----+             +-----+
         |  B  |             |  C  |
         +-----+             +-----+
          /   \               /   \
         .     .             .     .
        /       \           .       .
       .         .         /         \
      /           \       .           .
     .             .     .             .
    /               \   /               \
+-----+            +-----+           +-----+
|  D  |            |  E  |           |  F  |
+-----+            +-----+           +-----+
   \                .  .               /
    .              .    .             .
     \            .      .           .
      .          .        .         / 
       \        .          .       .
         .     .            .     .
          \   .              .   / 
         +-----+            +-----+
         |  G  |            |  H  |
         +-----+            +-----+
]]></artwork>
</figure>

  <t>
   Consider DetNet flow that must traverse BIER enabled domain from A to G and H.
   DetNet may use three BIER subdomains:
   <list style="symbols">
    <t>A-B-D-E-G (dash-dot): A is BFIR, E and G are BFERs,</t>
    <t>A-C-E-F-H (dash-double-dot): A is BFIR, E and H are BFERs,</t>
    <t>E-G-H (dotted): E is BFIR, G and H are BFERs.</t>
   </list>
  </t>

  <t>
   DetNet node A sends DetNet into red and purple BIER sub-domains. DettNet node
   E receives DetNet packet and sends into green sub-domain while terminating
   duplicates and those that deemed too-late.
  </t>

  <t>
   DetNet nodes G and H receive DetNet flows, terminate duplicates and those
   that are too-late.
  </t>
  </section>

  <section title="Analysis and Discussion">
  </section>

  <section title="Summary">
  </section>
 </section>





 <section title="Bit Indexed Explicit Replication - Traffic Engineering"
          anchor="sec_alt_bier_te">
  <t>
   An alternate use of Bit-Indexed Explicit Replication (BIER) uses bits in the
   BitString to represent adjacencies as opposed to destinations, as discussed in
   <xref target="I-D.eckert-bier-te-arch"> BIER Traffic Engineering (TE)</xref>.
   </t><t>
   The proposed function of BIER-TE in the DetNet data plane is to control the
   process of replication and elimination, as opposed to the identification of
   the flows or and the sequencing of packets within a flow.
   </t><t>
   At the path ingress, BIER-TE identifies the adjacencies that are activated
   for this packet (under the rule of the controller). At the egress, BIER-TE is 
   used to identify the adjacencies where transmission failed. This information
   is passed to the controller, which in turn can modify the active adjacencies
   for the next packets.
   </t><t>
   The value is that the replication can be controlled and monitored with the
   granularity of a packet and a adjacency in a control loops that involves an
   external controller.
  </t>
  <!--section title="On BIER-TE">
  <t>
   BIER-TE supports traffic engineering by explicit hop-by-hop forwarding
   and loose hop forwarding of packets. 
     </t><t>
      From the BIER-TE architecture, the key differences over BIER are:
      <list style="symbols">
      <t>BIER-TE replaces in-network autonomous path calculation by
         explicit paths calculated offpath by the BIER-TE controller host.
      </t>
      <t>In BIER-TE every BitPosition of the BitString of a BIER-TE packet
         indicates one or more adjacencies - instead of a BFER as in BIER.
      </t>
      <t>BIER-TE in each BFR has no routing table but only a BIER-TE
         Forwarding Table (BIFT) indexed by SI:BitPosition and populated
         with only those adjacencies to which the BFR should replicate
         packets to.
      </t>
      </list>        
   The generic view of an adjacency can be over a link, a tunnel or along a
   path segment. 
  </t><t>
   With <xref target="I-D.ietf-spring-segment-routing">Segment Routing</xref> a
   segment can be signaled as an MPLS label, or an IPv6 routing header .  A
   segment may be loosely of strictly source routed, depending on the need for
   full non-congruence and the confidence that loose routing may still achieve
   that need. 
  </t>
 </section-->
  <section title="Solution description">
  <t>
   BIER-TE enables to activate the replication and elimination functions in a
   manner that is abstract to the data plane forwarding information.  An
   adjacency, which is represented by a bit in the BIER header, can correspond
   in the data plane to an Ethernet hop, a Label Switched Path, or it can
   correspond to an IPv6 loose or strict source routed path. 
     </t><t>
   In a nutshell, BIER-TE is used as follows:
     <list style="symbols">
     <t>
     A controller computes a complex path, sometimes called a track, which takes
     the general form of a ladder. The steps and the side rails between them
     are the adjacencies that can be activated on demand on a per-packet basis
     using bits in the BIER header. 
     </t>
     </list>
     </t>
<figure anchor="fig_ladder" align="center"
title="Ladder Shape with Replication and Elimination Points">
<artwork align="center"><![CDATA[
 
                 ===> (A) ====> (C) ==== 
               //     ^ |       ^ |     \\
   ingress (I)        | |       | |       (E) egress
               \\     | v       | v     //
                 ===> (B) ====> (D) ==== 
 
]]></artwork>
</figure>
     <t>      
     <list style="symbols">
     <t>      
     The controller assigns a BIER domain, and inside that domain, assigns bits
     to the adjacencies. The controller assigns each bit to a replication node
     that sends towards the adjacency, for instance the ingress router into a
     segment that will insert a routing header in the packet. A single bit may
     be used for a step in the ladder, indicating the other end of the step in
     both directions.
     </t>
     </list>
     </t>
<figure anchor="fig_track" align="center"
title="Assigning Bits">
<artwork align="center"><![CDATA[
 
                 ===> (A) ====> (C) ==== 
               // 1   ^ |  4    ^ |   7 \\
   ingress (I)        |2|       |6|       (E) egress
               \\ 3   | v  5    | v   8 //    
                 ===> (B) ====> (D) ==== 
 
]]></artwork>
</figure>
     <t>      
     <list style="symbols">
     <t>     
     The controller activates the replication by deciding the setting of the
     bits associated with the adjacencies. This decision can be modified at any
     time, but takes the latency of a controller round trip to effectively take
     place. Below is an example that uses Replication and Elimination to protect
     the A->C adjacency.
     </t>
     </list>
     </t>
      
<texttable anchor="table_bit" title="Controlling Replication">
    <ttcol align='center'>Bit #</ttcol>
    <ttcol align='center'>Adjacency</ttcol>
    <ttcol align='center'>Owner</ttcol>
    <ttcol align='center'>Example Bit Setting</ttcol>
    
    <c>1</c>
    <c>I->A</c>
    <c>I</c>
    <c>1</c>
    
    <c>2</c>
    <c>A->B</c>
    <c>A</c>
    <c>1</c>
    
    <c></c>
    <c>B->A</c>
    <c>B</c>
    <c></c>
    
    <c>3</c>
    <c>I->C</c>
    <c>I</c>
    <c>0</c>
    
    <c>4</c>
    <c>A->C</c>
    <c>A</c>
    <c>1</c>
    
    <c>5</c>
    <c>B->D</c>
    <c>B</c>
    <c>1</c>
    
    <c>6</c>
    <c>C->D</c>
    <c>C</c>
    <c>1</c>
    
    <c></c>
    <c>D->C</c>
    <c>D</c>
    <c></c>
    
    <c>7</c>
    <c>C->E</c>
    <c>C</c>
    <c>1</c>
    
    <c>8</c>
    <c>D->E</c>
    <c>D</c>
    <c>0</c>
    
    <postamble>Replication and Elimination Protecting A->C</postamble>
</texttable>

     <t>
     <list style="symbols">
     <t> 
     The BIER header with the controlling BitString is injected in the packet by
     the ingress node of the deterministic path. That node may act as a
     replication point, in which case it may issue multiple copies of the packet
     </t>
     </list>
     </t>
<figure anchor="fig_track_prot" align="center"
title="Enabled Adjancecies">
<artwork align="center"><![CDATA[
 
              ====>  Repl ===> Elim ==== 
           //         |         ^        \\
   ingress            |         |           egress
                      v         |             
                     Fwd ====> Fwd      
 
]]></artwork>
</figure>
     <t>      
     <list style="symbols">
     <t>
     For each of its bits that is set in the BIER header, the owner replication
     point resets the bit and transmits towards the associated adjacency;
     to achieve this, the replication point copies the packet and inserts the
     relevant data plane information, such as a source route header, towards the
     adjacency that corresponds to the bit 
     </t>
     </list>
     </t>
<texttable anchor="table_bit2" title="BIER-TE in Action">
    <ttcol align='center'>Adjacency</ttcol>
    <ttcol align='center'>BIER BitString</ttcol>
    
    <c>I->A</c>
    <c>01011110</c>
    <c>A->B</c>
    <c>00011110</c>
    <c>B->D</c>
    <c>00010110</c>
    <c>D->C</c>
    <c>00010010</c>
    <c>A->C</c>
    <c>01001110</c>
    <postamble>BitString in BIER Header as Packet Progresses</postamble>
</texttable>

     <t>
     <list style="symbols">
     <t> 
     Adversely, an elimination node on the way strips the data plane information
     and performs a bitwise AND on the BitStrings from the various copies of the
     packet that it has received, before it forwards the packet with the
     resulting BitString. 
     </t>
     </list>
     </t>
<texttable anchor="table_bit3" title="BIER-TE in Action (cont.)">
    <ttcol align='center'>Operation</ttcol>
    <ttcol align='center'>BIER BitString</ttcol>
    <c>D->C</c>
    <c>00010010</c>
    <c>A->C</c>
    <c>01001110</c>
    <c> </c>
    <c>--------</c>
    <c>AND in C</c>
    <c>00000010</c>
    <c> </c>
    <c> </c>
    <c>C->E</c>
    <c>00000000</c>
    <postamble>BitString Processing at Elimination Point C</postamble>
</texttable>
     <t>
     <list style="symbols">
     <t> 
     In this example, all the transmissions succeeded and the BitString at
     arrival has all the bits reset - note that the egress may be an Elimination
     Point in which case this is evaluated after this node has performed its AND
     operation on the received BitStrings).
     </t>
     </list>
     </t>
<texttable anchor="table_bit4" title="BIER-TE in Action (cont.)">
    <ttcol align='center'>Failing Adjacency</ttcol>
    <ttcol align='center'>Egress BIER BitString</ttcol>
    <c>I->A</c>
    <c>Frame Lost</c>
    <c>I->B</c>
    <c>Not Tried</c>
    <c>A->C</c>
    <c>00010000</c>
    <c>A->B</c>
    <c>01001100</c>
    <c>B->D</c>
    <c>01001100</c>
    <c>D->C</c>
    <c>01001100</c>
    <c>C->E</c>
    <c>Frame Lost</c>
    <c>D->E</c>
    <c>Not Tried</c>
    <postamble>BitString indicating failures</postamble>
</texttable>
     <t>
     <list style="symbols">
     <t> 
     But if a transmission failed along the way, one (or more) bit is never
     cleared. <xref target="table_bit4"/> provides the possible outcomes of a 
     transmission. If the frame is lost, then it is probably due to a failure in
     either I->A or C->E, and the controller should enable I->B and D->E to
     find out. A BitString of 00010000 indicates unequivocally a transmission
     error on the A->C adjacency, and a BitString of 01001100 indicates a loss
     in either A->B, B->D or D->C; enabling D->E on the next packets may provide
     more information to sort things out.
     </t>
     </list>
     </t>
<t>In more details:   
  </t><t>   
   The BIER header is of variable size, and a DetNet network of a limited size
   can use a model with 64 bits if 64 adjacencies are enough, whereas a larger
   deployment may be able to signal up to 256 adjacencies for use 
   in very complex paths.
  </t>
<figure anchor="fig_BIER_bitsagain" align="center"
title="BIER-TE Header">
<artwork align="center"><![CDATA[
 
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |0 1 0 1|  Ver  |  Len  |              Entropy                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                BitString  (first 32 bits)                     ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                BitString  (last 32 bits)                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |OAM|     Reserved      | Proto |            BFIR-id            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 
]]></artwork>
</figure>
 <t>
   For the DetNet data plane, a replication point is an ingress point for more
   than one adjacency, and an elimination point is an egress point for more than
   one adjacency.
   </t><t>   
   A pre-populated state in a replication node indicates which bits are
   served by this node and to which adjacency each of these bits corresponds.
   With DetNet, the state is typically installed by a controller entity such as
   a PCE. 
   The way the adjacency is signaled in the packet is fully abstracted in the
   bit representation and must be provisioned to the replication nodes and 
   maintained as a local state, together with the timing or shaping information
   for the associated flow.
  </t><t>
   The DetNet data plane uses BIER-TE to control which adjacencies are used
   for a given packet. This is signaled from the path ingress, which sets the
   appropriate bits in the BIER BitString to indicate which replications must
   happen.
  </t><t>
   The replication point clears the bit associated to the adjacency where the
   replica is placed, and the elimination points perform a logical AND of the
   BitStrings of the copies that it gets before forwarding.   
  </t><t>     
   As is apparent in the examples above, clearing the bits enables to trace a
   packet to the replication points that made any particular copy. BIER-TE also
   enables to detect the failing adjacencies or sequences of adjacencies along a
   path and to activate additional replications to counter balance the failures.
    </t><t>
   Finally, using the same BIER-TE bit for both directions of the steps of the
   ladder enables to avoid replication in both directions along the crossing
   adjacencies. At the time of sending along the step of the ladder, the bit may
   have been already reset by performing the AND operation with the copy from
   the other side, in which case the transmission is not needed and does not
   occur (since the control bit is now off).
  </t>

</section>
</section>
</section>

<section title="Summary of data plane alternatives">
  <t>TBD. A condensed summary of all solution alternative.
  </t>
   
  <texttable anchor="tab_all_summary" title="PseudoWire criteria summary">
   <ttcol align="left">Alternative</ttcol>
   <ttcol align="left">Comments</ttcol>
   <c>Native IPv4</c>
   <c>..</c>
   <c>Native IPv6</c>
   <c>..</c>
   <c>GRE</c>
   <c>..</c>
   <c>L2TP</c>
   <c>..</c>
   <c>IP/MPLS</c>
   <c>..</c>
   <c>PWE</c>
   <c>..</c>
   <c>BIER</c>
   <c>..</c>
  </texttable>
</section>


<section title="Security considerations">
  <t>TBD. Analysis per solution alternative.
  </t>
</section>


<section anchor="iana" title="IANA Considerations">
  <t>This document has no IANA considerations.
  </t>
</section>

<section anchor="acks" title="Acknowledgements">
  <t>The author(s) ACK and NACK.
  </t>
  <t> The following people were part of the DetNet Data Plane Design Team:
  <list style="bullets">
   <t>Jouni Korhonen</t>
   <t>J&aacute;nos Farkas</t>
   <t>Norman Finn</t>
   <t>Olivier Marce</t>
   <t>Gregory Mirsky</t>
   <t>Pascal Thubert</t>
   <t>Zhuangyan Zhuang</t>
  </list></t>
</section>
</middle>

<back>
  <references title="Normative References">
   &rfc2119;
  </references>
  <references title="Informative References">
   &rfc0791;
   &rfc1122;
   &rfc2460;
   &rfc3031;
   &rfc3032;
   &rfc3985;
   &rfc3550;
   &rfc6864;
   &rfc6621;
   &rfc6814;
   &rfc1393;
   &rfc6540;
   &rfc5921;
   &rfc6275;
   &rfc2474;
   &rfc2702;
   &rfc3168;
   &rfc3209;
   &rfc3270;
   &rfc4023;
   &rfc4446;
   &rfc4447;
   &rfc4448;
   &rfc4817;
   &rfc5087;
   &rfc5129;
   &rfc5462;
   &rfc6658;
   &rfc6073;
   &rfc6437;
   &rfc6718;
   &rfc7167;
   &rfc6733;
   &rfc2784;
   &rfc2890;
   &rfc7637;
   &rfc1700;
   &rfc5086;
   &rfc7426;
   &rfc7510;
   &I-D.ietf-intarea-gre-ipv6;
   &I-D.finn-detnet-problem-statement;
   &I-D.finn-detnet-architecture;
   &I-D.ietf-isis-pcr;
   &I-D.ietf-spring-segment-routing;
   &I-D.ietf-6man-segment-routing-header;
   &I-D.ietf-v6ops-ipv6-ehs-in-real-world;
   &I-D.ietf-sunset4-gapanalysis;
   &I-D.eckert-bier-te-arch;

   <reference anchor="ETYPES"
     target="http://ftp.isi.edu/in-notes/iana/assignments/ethernet-numbers ">
    <front>
     <title>Ethernet Numbers</title>
     <author>
      <organization>IANA</organization>
     </author>
     <date year="2015" month="March"/>
    </front>
   </reference>
   
   <reference anchor="ST20227"
     target="https://www.smpte.org/digital-library">
    <front>
     <title>Seamless Protection Switching of SMPTE ST 2022 IP Datagrams</title>
     <author>
      <organization>SMPTE 2022</organization>
     </author>
     <date year="2013"/>
    </front>
    <seriesInfo name="ST" value="2022-7:2013"/>
   </reference>
      
   <reference anchor="TSNTG"
    target="http://www.IEEE802.org/1/pages/avbridges.html">
    <front>
     <title>IEEE 802.1 Time-Sensitive Networks Task Group</title>
     <author>
      <organization>IEEE Standards Association</organization>
     </author>
     <date year="2013" />
    </front>
   </reference>
  
   <reference anchor="IEEE8021CB"
     target="http://www.ieee802.org/1/files/private/cb-drafts/d2/802-1CB-d2-1.pdf">
    <front>
     <title>Draft Standard for Local and metropolitan area networks - Seamless Redundancy</title>
     <author initials="N. F." surname="Finn" fullname="Norman Finn">
      <organization>IEEE 802.1</organization>
     </author>
     <date month="December" year="2015"/>
    </front>
    <seriesInfo name="IEEE P802.1CB /D2.1" value="P802.1CB"/>
    <format type="PDF" target="http://www.ieee802.org/1/files/private/cb-drafts/d2/802-1CB-d2-1.pdf"/>
   </reference>

   <reference anchor="IEEE8021Qca"
     target="http://www.ieee802.org/1/files/private/ca-drafts/d2/802-1Qca-d2-1.pdf">
    <front>
     <title>IEEE 802.1Qca Bridges and Bridged Networks - Amendment 24: Path Control and Reservation</title>
     <author>
      <organization>IEEE 802.1</organization>
     </author>
     <date month="June" year="2015"/>
    </front>
    <seriesInfo name="IEEE P802.1Qca/D2.1" value="P802.1Qca"/>
    <format type="PDF" target="http://www.ieee802.org/1/files/private/ca-drafts/d2/802-1Qca-d2-1.pdf"/>
   </reference>
  
  
  </references>
 </back>
</rfc>

